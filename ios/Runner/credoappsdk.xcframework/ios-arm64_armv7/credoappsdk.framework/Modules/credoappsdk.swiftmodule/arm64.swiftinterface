// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name credoappsdk
import AVFoundation
import Compression
import Contacts
import CoreLocation
import CoreTelephony
import EventKit
import Foundation
import Photos
import Swift
import UIKit
@_exported import credoappsdk
public typealias Byte = Swift.UInt8
public struct Digest {
  public let digest: [credoappsdk.Byte]
  public var checksum: Swift.String {
    get
  }
}
extension String {
  public var toMd5: Swift.String {
    get
  }
  public var md5Digest: [credoappsdk.Byte] {
    get
  }
}
public class CredoAppService {
  public init(url: Swift.String, authKey: Swift.String) throws
  public func collectData(recordNumber: Swift.String) throws -> Swift.String
  @objc deinit
}
extension Data {
  public func compress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public func decompress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public enum CompressionAlgorithm {
    case zlib
    case lzfse
    case lzma
    case lz4
    public static func == (a: Foundation.Data.CompressionAlgorithm, b: Foundation.Data.CompressionAlgorithm) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func deflate() -> Foundation.Data?
  public func inflate() -> Foundation.Data?
  public func zip() -> Foundation.Data?
  public func unzip(skipCheckSumValidation: Swift.Bool = true) -> Foundation.Data?
  public func gzip() -> Foundation.Data?
  public func gunzip() -> Foundation.Data?
  public func adler32() -> credoappsdk.Adler32
  public func crc32() -> credoappsdk.Crc32
}
public struct Crc32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public struct Adler32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
@objc public class CredoAppError : ObjectiveC.NSObject, Swift.Error {
  public init(errorType: credoappsdk.ErrorType, errorMessage: Swift.String? = nil)
  public func getErrorMessage() -> Swift.String?
  public func getErrorType() -> credoappsdk.ErrorType
  @objc override dynamic public init()
  @objc deinit
}
@objc(ErrorType) public enum ErrorType : Swift.Int {
  case InvalidArgument
  case NetworkConnectionIssue
  case ForbiddenAction
  case ServerError
  case UnknownIssue
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.Data.CompressionAlgorithm : Swift.Equatable {}
extension Foundation.Data.CompressionAlgorithm : Swift.Hashable {}
extension credoappsdk.ErrorType : Swift.Equatable {}
extension credoappsdk.ErrorType : Swift.Hashable {}
extension credoappsdk.ErrorType : Swift.RawRepresentable {}
